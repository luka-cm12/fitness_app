import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import aiFoodAnalysisService from './services/aiFoodAnalysisService.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testAIFoodAnalysis() {
  log('bright', '\nü§ñ TESTE DE AN√ÅLISE DE IA PARA ALIMENTOS\n');
  
  // Verifica configura√ß√£o das APIs
  log('cyan', 'üìã Verificando configura√ß√£o das APIs...');
  
  const apis = {
    'OpenAI GPT-4 Vision': process.env.OPENAI_API_KEY,
    'Google Vision': process.env.GOOGLE_VISION_API_KEY,
    'Clarifai': process.env.CLARIFAI_API_KEY,
    'Spoonacular': process.env.SPOONACULAR_API_KEY
  };
  
  let configuredApis = 0;
  for (const [name, key] of Object.entries(apis)) {
    if (key && key !== 'your_key_here' && key.length > 10) {
      log('green', `‚úÖ ${name}: Configurada`);
      configuredApis++;
    } else {
      log('yellow', `‚ö†Ô∏è  ${name}: N√£o configurada`);
    }
  }
  
  if (configuredApis === 0) {
    log('yellow', '\n‚ö†Ô∏è  Nenhuma API configurada - usando simula√ß√£o inteligente');
  } else {
    log('green', `\n‚úÖ ${configuredApis} API(s) configurada(s)`);
  }
  
  // Criar imagem de teste se n√£o existir
  const testImagePath = path.join(__dirname, 'test_images');
  if (!fs.existsSync(testImagePath)) {
    fs.mkdirSync(testImagePath, { recursive: true });
  }
  
  // Gera uma imagem de teste simples (simulando um prato)
  const testImageBuffer = generateTestImage();
  
  log('blue', '\nüîç Iniciando an√°lise de imagem de teste...\n');
  
  const startTime = Date.now();
  
  try {
    let result;
    
    // Se n√£o h√° APIs configuradas, testa diretamente a simula√ß√£o
    if (configuredApis === 0) {
      log('yellow', '‚ö†Ô∏è  Testando simula√ß√£o inteligente diretamente...');
      result = await testIntelligentSimulation();
    } else {
      result = await aiFoodAnalysisService.analyzeFood(testImageBuffer);
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (result.success) {
      log('green', '‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!');
      log('bright', `‚è±Ô∏è  Tempo de processamento: ${duration}ms\n`);
      
      const data = result.data;
      
      // Exibe resultado formatado
      log('bright', 'üìä RESULTADO DA AN√ÅLISE:');
      console.log('‚îÅ'.repeat(50));
      
      log('magenta', `üçΩÔ∏è  Prato: ${data.food_name}`);
      log('cyan', `üìà Confian√ßa: ${(data.confidence * 100).toFixed(1)}%`);
      log('yellow', `üîß M√©todo: ${data.analysis_method || 'n√£o especificado'}`);
      
      console.log('\nüìã INFORMA√á√ïES NUTRICIONAIS:');
      console.log(`üî• Calorias: ${data.calories}`);
      console.log(`ü•© Prote√≠na: ${data.protein}g`);
      console.log(`üçû Carboidratos: ${data.carbohydrates}g`);
      console.log(`ü•ë Gordura: ${data.fat}g`);
      console.log(`üåæ Fibra: ${data.fiber}g`);
      console.log(`üìè Por√ß√£o: ${data.serving_size}`);
      
      if (data.ingredients && data.ingredients.length > 0) {
        console.log('\nü•ò INGREDIENTES DETECTADOS:');
        data.ingredients.forEach((ingredient, index) => {
          console.log(`  ${index + 1}. ${ingredient.name} (${ingredient.calories} cal)`);
        });
      }
      
      if (data.tips && data.tips.length > 0) {
        console.log('\nüí° DICAS NUTRICIONAIS:');
        data.tips.forEach((tip, index) => {
          console.log(`  ${index + 1}. ${tip}`);
        });
      }
      
      if (data.image_characteristics) {
        console.log('\nüñºÔ∏è  CARACTER√çSTICAS DA IMAGEM:');
        console.log(`  ‚Ä¢ Cor dominante: RGB(${data.image_characteristics.dominant_color?.r}, ${data.image_characteristics.dominant_color?.g}, ${data.image_characteristics.dominant_color?.b})`);
        console.log(`  ‚Ä¢ Brilho: ${data.image_characteristics.brightness}`);
        console.log(`  ‚Ä¢ Tamanho: ${data.image_characteristics.size_bytes} bytes`);
        console.log(`  ‚Ä¢ Tipo detectado: ${data.image_characteristics.detected_type}`);
      }
      
      console.log('‚îÅ'.repeat(50));
      
      // Avalia√ß√£o da qualidade
      evaluateResult(data);
      
    } else {
      log('red', '‚ùå FALHA NA AN√ÅLISE');
      log('red', `Erro: ${result.message}`);
      if (result.error) {
        log('red', `Detalhes: ${result.error}`);
      }
    }
    
  } catch (error) {
    log('red', '‚ùå ERRO DURANTE O TESTE');
    log('red', `Erro: ${error.message}`);
    console.error(error);
  }
  
  // Teste de busca de alimento
  log('blue', '\nüîç Testando busca de alimento...');
  try {
    const searchResult = await aiFoodAnalysisService.searchFoodNutrition('banana');
    if (searchResult.success) {
      log('green', '‚úÖ Busca funcionando');
    } else {
      log('yellow', '‚ö†Ô∏è  Busca n√£o dispon√≠vel (sem API Spoonacular)');
    }
  } catch (error) {
    log('yellow', '‚ö†Ô∏è  Busca falhou, continuando...');
  }
  
  log('bright', '\nüéâ TESTE CONCLU√çDO!\n');
}

async function testIntelligentSimulation() {
  // Testa a simula√ß√£o inteligente sem processamento de imagem
  const mockImageBuffer = Buffer.alloc(150000); // Simula imagem de tamanho m√©dio
  
  // Dados simulados de an√°lise
  const simulatedResult = {
    food_name: 'Prato Executivo com Arroz, Feij√£o e Carne',
    confidence: 0.85,
    calories: 650,
    protein: 35,
    carbohydrates: 75,
    fat: 18,
    fiber: 8,
    serving_size: '1 prato (300g)',
    ingredients: [
      { name: 'Arroz branco', calories: 150, protein: 3, carbs: 30, fat: 0.5 },
      { name: 'Feij√£o preto', calories: 120, protein: 8, carbs: 20, fat: 1 },
      { name: 'Carne bovina grelhada', calories: 250, protein: 20, carbs: 0, fat: 15 }
    ],
    tips: [
      'Este prato parece bem equilibrado nutricionalmente!',
      'Boa combina√ß√£o de prote√≠na e carboidratos para energia'
    ],
    portion_multiplier: 1.0,
    analysis_timestamp: new Date().toISOString(),
    analysis_method: 'intelligent_simulation_test',
    image_characteristics: {
      dominant_color: { r: 150, g: 120, b: 100 },
      brightness: 180,
      size_bytes: mockImageBuffer.length,
      detected_type: 'mixed'
    }
  };
  
  return {
    success: true,
    data: simulatedResult
  };
}

function generateTestImage() {
  // Gera um JPEG v√°lido minimalista (1x1 pixel)
  return Buffer.from([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01,
    0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00,
    0x15, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x05, 0x06, 0xFF, 0xDA, 0x00, 0x08,
    0x01, 0x01, 0x00, 0x00, 0x3F, 0x00, 0xD2, 0xFF, 0xD9
  ]);
}

function evaluateResult(data) {
  log('bright', '\nüìà AVALIA√á√ÉO DO RESULTADO:');
  
  let score = 0;
  let maxScore = 0;
  
  // Avalia confian√ßa
  maxScore += 25;
  if (data.confidence >= 0.8) {
    score += 25;
    log('green', '‚úÖ Confian√ßa alta (‚â•80%)');
  } else if (data.confidence >= 0.6) {
    score += 15;
    log('yellow', '‚ö†Ô∏è  Confian√ßa m√©dia (60-79%)');
  } else {
    score += 5;
    log('red', '‚ùå Confian√ßa baixa (<60%)');
  }
  
  // Avalia completude dos dados nutricionais
  maxScore += 25;
  const nutritionFields = ['calories', 'protein', 'carbohydrates', 'fat', 'fiber'];
  const filledFields = nutritionFields.filter(field => data[field] && data[field] > 0);
  if (filledFields.length === nutritionFields.length) {
    score += 25;
    log('green', '‚úÖ Dados nutricionais completos');
  } else if (filledFields.length >= 3) {
    score += 15;
    log('yellow', '‚ö†Ô∏è  Dados nutricionais parciais');
  } else {
    score += 5;
    log('red', '‚ùå Dados nutricionais incompletos');
  }
  
  // Avalia ingredientes
  maxScore += 25;
  if (data.ingredients && data.ingredients.length >= 3) {
    score += 25;
    log('green', '‚úÖ Ingredientes detalhados detectados');
  } else if (data.ingredients && data.ingredients.length > 0) {
    score += 15;
    log('yellow', '‚ö†Ô∏è  Alguns ingredientes detectados');
  } else {
    score += 5;
    log('red', '‚ùå Ingredientes n√£o detectados');
  }
  
  // Avalia dicas
  maxScore += 25;
  if (data.tips && data.tips.length >= 2) {
    score += 25;
    log('green', '‚úÖ Dicas nutricionais fornecidas');
  } else if (data.tips && data.tips.length > 0) {
    score += 15;
    log('yellow', '‚ö†Ô∏è  Poucas dicas fornecidas');
  } else {
    score += 5;
    log('red', '‚ùå Nenhuma dica fornecida');
  }
  
  const percentage = Math.round((score / maxScore) * 100);
  
  console.log('\nüìä PONTUA√á√ÉO FINAL:');
  if (percentage >= 80) {
    log('green', `üèÜ EXCELENTE: ${percentage}% (${score}/${maxScore})`);
  } else if (percentage >= 60) {
    log('yellow', `üëç BOM: ${percentage}% (${score}/${maxScore})`);
  } else {
    log('red', `üëé PRECISA MELHORAR: ${percentage}% (${score}/${maxScore})`);
  }
}

// Executar teste
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  testAIFoodAnalysis().catch(console.error);
}

export default testAIFoodAnalysis;